# 二分查找(`binary search`)
- 针对**有序数据**集合的查找，时间复杂度 O(logn)；

- 非常高效，有时比常量级O(1)的算法还要高效：
    - n=2**32时，也只需要比较 32 次
    - 大 O 标记法表示时间复杂度的时候，会省略掉常数、系数和低阶。
    因此 O(1) 有可能表示的是一个非常大的常量值，比如 O(10000)。
    此时 O(logn) 的算法执行效率反而更高。
    
    
    
## 无重复元素的有序数组的二分查找：
```python
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            high = mid - 1
        else:
            low = mid + 1
    return -1
```   
- **需要重要关注的点：**
    - 循环推出条件为`low<=high`，而不是`low<high`
    - `mid`的取值，当`low`和`high`都非常大时，`low+high`可能溢出，可以改成`low+(high-low)//2`
    或位运算`low+((high-low)>>1)`
    - `low`和`high`的更新，有加一和减一操作，若直接`low=mid`或`high=mid`可能发生死循环
    
    
    
- 递归实现：
```python
def binary_search(arr, target):
    def _helper(arr, l, h):
        if l > h:
            return -1
        mid = l + (h - l) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            return _helper(arr, l, mid-1)
        else:
            return _helper(arr, mid+1, h) 
    return _helper(arr, 0, len(arr)-1)
```    



## 二分查找的应用场景：
- 二分查找需要按下标随机访问元素O(1)，因此二分查找依赖的是顺序表结构，简单点就是数组；
    - 链表(访问元素O(n))等其它数据结构，不适于二分查找
    
- 针对的是有序数组：
    - 如果数据没有序，需要先排序，排序的时间复杂度最低是 O(nlogn)。；
    - 二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中；
    - 而动态变化的数据集合，要么每次插入、删除操作之后保证数据仍然有序，
    要么在每次二分查找之前都先进行排序。因此维护有序的成本很高，
    
- 数据量太小不适合二分查找
    - 数据量小时，直接顺序遍历
    - 此外若数据之间的比较操作非常耗时，不管数据量大小，推荐使用二分查找。 
    如需要比较长度超过 300 的字符串，二分查找相比顺序遍历有优势   
    
- 数据量太大也不适合二分查找：
    - 1000 万个整数，每个数据大小是 8 字节，内存占用差不多是 80MB，符合内存的限制
    - 二分查找的底层需要依赖数组，数组为了支持随机访问的特性，要求内存空间连续；
    比如， 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。    
   
   
## 二分查找的变体问题
- 凡是用二分查找能解决的，更倾向于用散列表或者二叉查找树。即便会消耗更多内存  
- “值等于给定值”的查找很少用到，但在“近似”查找问题，二分查找的优势更加明显。
    - 此时通常有序数据集合中存在重复的数据，或分段有序

### 查找第一个值等于给定值的元素

```python
def binary_search(arr, target):
    l, h = 0, len(arr) - 1
    while l <= h:
        mid = l + (h - l) // 2
        if arr[mid] == target:
            while arr[mid-1] == target and mid >= 1:
                mid -= 1
            return mid
        if arr[mid] < target:
            l = mid + 1
        elif arr[mid] > target:
            h = mid - 1
        else:
            if mid==0 or arr[mid-1] != target:
                return mid
            else:
                h = mid - 1
    return -1
```

### 查找最后一个值等于给定值的元素

```python
def binary_search(arr, target):
    l, h = 0, len(arr) - 1
    while l <= h:
        mid = l + (h - l) // 2
        if arr[mid] == target:
            while arr[mid-1] == target and mid >= 1:
                mid -= 1
            return mid
        if arr[mid] < target:
            l = mid + 1
        elif arr[mid] > target:
            h = mid - 1
        else:
            if mid==len(arr) - 1 or arr[mid+1] != target:
                return mid
            else:
                l = mid + 1
    return -1
```

### 查找第一个大于等于给定值的元素
```python
def binary_search(arr, target):
    l, h = 0, len(arr) - 1
    while l <= h:
        mid = l + (h - l) // 2
        if arr[mid] >= target:
            if mid==0 or arr[mid - 1] < target:
                return mid
            else:
                h = mid - 1
        else:
            l = mid + 1
    return -1
```

### 查找最后一个小于等于给定值的元素
```python
def binary_search(arr, target):
    l, h = 0, len(arr) - 1
    while l <= h:
        mid = l + (h - l) // 2
        if arr[mid] <= target:
            if mid==len(arr)-1 or arr[mid + 1] > target:
                return mid
            else:
                l = mid + 1
        else:
            h = mid - 1
    return -1
```
